<?php

namespace app\controllers;

use app\models\Notifications;
use app\models\Transactions;
use app\models\User;
use app\models\AdminSettings;
use poloniex\api\tools\Request;
use Yii;
use yii\filters\AccessControl;
use yii\helpers\Url;
use yii\web\Controller;
use app\models\api\CoinPayments;

class CoinsController extends Controller
{
    public $layout = 'dashboard-layout';
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                //'only' => ['login', 'logout', 'signup'],
                'rules' => [
                    [
                        'allow' => true,
                        'actions' => ['api-answer'],
                        'roles' => ['?'],
                    ],
                    [
                        'allow' => true,
                        //'actions' => ['logout'],
                        'roles' => ['@'],
                    ],
                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
        Yii::$app->controller->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionCreateTransaction()
    {
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = 'json';
            $id = Yii::$app->user->getId();

            $amount = (double)Yii::$app->request->post('value1', '');
            $curr = (string)Yii::$app->request->post('currency1', '');

            $transaction = new Transactions();
            $transaction->amount1     = $amount;
            $transaction->type        = 'coin';
            $transaction->sub_type    = 'deposit';
            $transaction->currency1   = $curr;
            $transaction->currency2   = $curr;
            $transaction->user_id     = $id;
            $transaction->buyer_name  = Yii::$app->user->identity->username;
            $transaction->buyer_email = Yii::$app->user->identity->email;

            $answer = $transaction->createTransaction();

            if ($answer['result'] == 'ok') {
                $transaction->save();
                return [
                    'msg' => 'ok',
                    'status'=>'Транзакция создана успешно',
                    'result'=>$answer,
                    'transaction' => $transaction
                ];
            } else {
                return ['msg' => 'error','status'=>$answer];
            }
        }
    }

    public function actionChangeRateBalance()
    {
        $cps = new CoinPayments();
        $rates_btc = $cps->GetRates();

        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = 'json';

            $id      = Yii::$app->user->getId();
            $amount1 = (double)Yii::$app->request->post('value', '');
            $curr1   = (string)Yii::$app->request->post('currency1', '');
            $curr2   = (string)Yii::$app->request->post('currency2', '');

            if ($curr1 === $curr2) {
                return ['msg' => 'error', 'status' => "Одинаковые валюты"];
            }

            if (!($user = User::findOne(['id'=>$id]))) {
                return ['msg' => 'error', 'status' => "No User finded"];
            }

            $cps                    = new CoinPayments();
            $rates_btc              = $cps->GetRates();
            $exchangeCommissionRate = (double)AdminSettings::findOne(['id' => 1])->value;

            if (User::allowedCurrency($curr1) && User::allowedCurrency($curr2)) {
                if ($amount1 <= $user->{$curr1.'_money'}) {
                    $user->{$curr1.'_money'} -= $amount1;
                    $amount2 = ($amount1*$rates_btc['result'][$curr1]['rate_btc'])
                                /
                               ($rates_btc['result'][$curr2]['rate_btc']);

                    $exchangeCommission = $amount2*($exchangeCommissionRate/100);

                    $user->{$curr2.'_money'} += $amount2-$exchangeCommission;
                } else {
                    return ['msg' => 'error', 'status' => "No money on balance"];
                }
            } else {
                return ['msg' => 'error', 'status' => "No currency finded"];
            }

            $global_admin = User::find()->where(['id' => Yii::$app->params['globalAdminId']])->one();
            $global_admin->{$curr2.'_money'} += $exchangeCommission;
            $transaction_admin              = new Transactions();
            $transaction_admin->amount1     = $exchangeCommission;
            $transaction_admin->currency1   = $curr2;
            $transaction_admin->type        = 'coin';
            $transaction_admin->sub_type    = 'commission';
            $transaction_admin->comment     = 'exchange';
            $transaction_admin->status      = 1;
            $transaction_admin->user_id     = $user->id;
            $transaction_admin->buyer_name  = $user->username;
            $transaction_admin->buyer_email = $user->email;

            if ($user->save() && $global_admin->save()) {
                $transaction                 = new Transactions();
                $transaction->type           = 'coin';
                $transaction->sub_type       = 'exchange';
                $transaction->comment        = $exchangeCommission;
                $transaction->user_id        = $id;
                $transaction->status         = 1;
                $transaction->amount1        = -1*$amount1;
                $transaction->amount2        = $amount2-$exchangeCommission;
                $transaction->currency1      = $curr1;
                $transaction->currency2      = $curr2;
                $transaction->buyer_name     = Yii::$app->user->identity->username;
                $transaction->buyer_email    = Yii::$app->user->identity->email;


                if (!$transaction_admin->save() || !$transaction->save()) {
                    return ['msg' => 'error', 'status' => "Don't save transaction"];
                }
                return [
                    'msg'        => 'ok',
                    'status'     => 'Обмен средств выполнен успешно',
                    'value'      => $user->{$curr2.'_money'},
                    'commission' => $exchangeCommission
                ];
            } else {
                return ['msg' => 'error', 'status' => "Don't save balance user/admin"];
            }

        }
    }

    public function actionCreateWithdraw()
    {
        if (Yii::$app->request->isAjax) {
            Yii::$app->response->format = 'json';

            $id         = Yii::$app->user->getId();
            $amount     = (double)Yii::$app->request->post('value', '');
            $curr1      = (string)Yii::$app->request->post('currency1', '');
            //$curr2      = (string)Yii::$app->request->post('currency2', '');
            $user_purse = (string)Yii::$app->request->post('user_purse', '');

            $transaction              = new Transactions();
            $transaction->amount1     = -1*$amount;
            $transaction->amount2     = $amount/100*(double)AdminSettings::findOne(['id' => 5])->value;
            $transaction->currency1   = $curr1;
            $transaction->currency2   = $curr1;
            $transaction->type        = 'coin';
            $transaction->sub_type    = 'withdraw';
            $transaction->user_purse  = $user_purse;
            $transaction->status      = 0;
            $transaction->user_id     = $id;
            $transaction->buyer_name  = Yii::$app->user->identity->username;
            $transaction->buyer_email = Yii::$app->user->identity->email;

            $user = User::find()->where(['id' => $id])->one();

            if (User::allowedCurrency($curr1)) {
                if ($user->{$curr1.'_money'} < $amount) {
                    return ['msg' => 'error', 'status' => "Don't have balance"];
                }
                $user->{$curr1.'_money'} -= $amount;

                $global_admin = User::find()->where(['id' => Yii::$app->params['globalAdminId']])->one();
                $global_admin->{$curr1.'_money'} += $transaction->amount2;
                $transaction_admin = new Transactions();
                $transaction_admin->amount1     = $transaction->amount2;
                $transaction_admin->currency1   = $curr1;
                $transaction_admin->type        = 'coin';
                $transaction_admin->sub_type    = 'commission';
                $transaction_admin->comment     = 'withdraw';
                $transaction_admin->status      = 1;
                $transaction_admin->user_id     = $user->id;
                $transaction_admin->buyer_name  = $user->username;
                $transaction_admin->buyer_email = $user->email;

            } else {
                return ['msg' => 'error', 'status' => "Failed currency"];
            }

            if ($transaction->save() && $transaction_admin->save()) {
                if (!$user->save() || !$global_admin->save()) {
                    $transaction->delete();
                    return ['msg' => 'error', 'status' => "Don't save user"];
                }
                return ['msg' => 'ok', 'status' => 'Транзакция создана успешно', 'result' => $transaction];
            } else {
                return ['msg' => 'error', 'status' => "Don't save transaction"];
            }

        }
    }

    public function actionTransactions()
    {
        $data = [];
        $id   = Yii::$app->user->getId();

        if (User::canAdmin()) {
            $data['transactions'] = Transactions::find()->orderBy('date_start DESC')->all();
        } else {
            $data['transactions'] = Transactions::find()->where(['user_id'=>$id])->orderBy('date_start DESC')->all();
        }

        return $this->render('transactions', $data);
    }

    public function actionTransactionDone()
    {
        if (Yii::$app->request->isAjax) {
            $id = Yii::$app->user->getId();
            if (User::canAdmin()) {
                Yii::$app->response->format = 'json';

                $transaction_id = (int)Yii::$app->request->post('transaction_id', '');

                if (!($transaction = Transactions::findOne(['id' => $transaction_id]) )) {
                    return ['msg' => 'error', 'status' => "No Transaction finded"];
                }

                $transaction->status = 1;

                if ($transaction->save()) {
                    $notification = new Notifications();
                    $notification->createNotification($transaction->user_id,
                        'success',
                        'Вы успещно получили выплату на кошелек',
                        $transaction->attributes);
                    return ['msg' => 'ok', 'status'=>'Транзакция отмечена выплаченной', 'transaction' => $transaction];
                } else {
                    return ['msg' => 'error', 'status' => "Don't save transaction"];
                }

            }
        }
    }

    public function actionTransactionReturn()
    {
        if (Yii::$app->request->isAjax) {
            if (User::canAdmin()) {
                Yii::$app->response->format = 'json';

                $transaction_id = (int)Yii::$app->request->post('transaction_id', '');

                if (!($transaction = Transactions::findOne(['id' => $transaction_id]) )) {
                    return ['msg' => 'error', 'status' => "No Transaction finded"];
                }

                $user = User::find()->where(['id' => $transaction->user_id])->one();

                if (User::allowedCurrency($transaction->currency1)) {
                    $user->{$transaction->currency1.'_money'} += (-1*$transaction->amount1)-$transaction->amount2;
                } else {
                    return ['msg' => 'error', 'status' => "Failed currency"];
                }

                if ($transaction->delete()) {
                    $notification = new Notifications();
                    $notification->createNotification($transaction->user_id,
                        'info',
                        'Вам отменили выплату',
                        $transaction->attributes);
                    return ['msg' => 'ok', 'status'=>'Отмена выплаты'];
                } else {
                    return ['msg' => 'error', 'status' => "Don't save transaction"];
                }

            }
        }
    }

    public function actionApiAnswer()
    {
        Yii::trace($_POST);
        $cp_merchant_id = Yii::$app->params['coinPayments_cp_merchant_id'];
        $cp_ipn_secret = Yii::$app->params['coinPayments_cp_ipn_secret'];

        if (!isset($_POST['ipn_mode']) || $_POST['ipn_mode'] != 'hmac') {
            $this->errorAndDie('IPN Mode is not HMAC');
        }
        if (!isset($_SERVER['HTTP_HMAC']) || empty($_SERVER['HTTP_HMAC'])) {
            $this->errorAndDie('No HMAC signature sent.');
        }
        $request = file_get_contents('php://input');
        if ($request === false || empty($request)) {
            $this->errorAndDie('Error reading POST data');
        }
        if (!isset($_POST['merchant']) || $_POST['merchant'] != trim($cp_merchant_id)) {
            $this->errorAndDie('No or incorrect Merchant ID passed');
        }
        $hmac = hash_hmac("sha512", $request, trim($cp_ipn_secret));
        if (!hash_equals($hmac, $_SERVER['HTTP_HMAC'])) {
            $this->errorAndDie('HMAC signature does not match');
        }

        $txn_id = $_POST['txn_id'];
        $item_name = $_POST['item_name']; //The name of the item that was purchased.
        $buyer_name = $_POST['buyer_name']; //The name of the buyer.
        $item_number = $_POST['item_number']; //This is a passthru variable for your own use. [visible to buyer]
        $amount1 = floatval($_POST['amount1']); //The total amount of the payment in your original currency/coin.
        $amount2 = floatval($_POST['amount2']); //The total amount of the payment in the buyer's selected coin.
        $currency1 = $_POST['currency1'];
        $currency2 = $_POST['currency2']; //The coin the buyer chose to pay with.
        $user_id = $_POST['invoice']; //$id
        $amount_in_btc = $_POST['custom']; //$minner_id
        $status = intval($_POST['status']);
        $status_text = $_POST['status_text'];

        Yii::trace("STATUS");
        Yii::trace($status);

        if ($status >= 100 || $status == 2 || $status == 0) { //не забудь удалить $status == 0
            // payment is complete or queued for nightly payout, success

            $txn = Transactions::find()
                                ->where(['txn_id' => $txn_id])
                                ->andWhere(['type'=>'coin'])
                                ->andWhere(['sub_type'=>'deposit'])
                                ->andWhere(['status' => 0]);
            if (!$txn->count()) {
                Yii::trace("E1");
                $this->errorAndDie('count = 0');
            }
            $txn = $txn->one();

            if ($currency1 != $txn->currency1 && $currency2 != $txn->currency2) {
                $this->errorAndDie('Original currency mismatch!');
                Yii::trace("E2");
            }
            if ($amount1 < $txn->amount1) {
                Yii::trace("E3");
                $txn->amount1 = $amount1;
            }
            if ($amount1 <= 0 || $amount2 <= 0) {
                Yii::trace("E4");
                $this->errorAndDie('Amount cant be zero!');
            }
            if ($user_id != $txn->user_id) {
                Yii::trace("E5");
                $this->errorAndDie('User id not equaled!');
            }

            $txn->status = 1;

            if ($txn->save()) {
                $usr = User::find()->where(['id' => $user_id])->one();
                $global_admin = User::find()->where(['id' => Yii::$app->params['globalAdminId']])->one();

                if (User::allowedCurrency($currency1)) {
                        $usr->{$currency1.'_money'} += $amount1-$txn->amount2;
                } else {
                    Yii::trace("Dont available CURRENCY");
                    $this->errorAndDie('Save error CUR');
                }

                $global_admin->{$currency1.'_money'} += $txn->amount2;
                $transaction_admin = new Transactions();
                $transaction_admin->amount1     = $txn->amount2;
                $transaction_admin->currency1   = $currency1;
                $transaction_admin->type        = 'coin';
                $transaction_admin->sub_type    = 'commission';
                $transaction_admin->comment     = 'deposit';
                $transaction_admin->status      = 1;
                $transaction_admin->user_id     = $usr->id;
                $transaction_admin->buyer_name  = $usr->username;
                $transaction_admin->buyer_email = $usr->email;

                if (!$usr->save() || !$transaction_admin->save() || !$global_admin->save()) {
                    Yii::trace("Dont save balance to users/admin and create transaction");
                    $this->errorAndDie('Save error 1');
                }
                $notification = new Notifications();
                $notification->createNotification($usr->id,
                    'info',
                    'Успещно полученно пополнение баланса',
                    $txn->attributes);
            } else {
                Yii::trace("E6");
                Yii::trace($txn->errors);
                $this->errorAndDie('Save error 2');
            }
        } elseif ($status < 0) {
            //payment error, this is usually final but payments will sometimes
            //be reopened if there was no exchange rate conversion or with seller consent
        } else {
            //payment is pending, you can optionally add a note to the order page
        }
        die('IPN OK');
    }

    private function errorAndDie($error_msg)
    {
        $cp_debug_email = Yii::$app->params['adminEmail'];
        if (!empty($cp_debug_email)) {
            $report = 'Error: '.$error_msg."\n\n";
            $report .= "POST Data\n\n";
            foreach ($_POST as $k => $v) {
                $report .= "|$k| = |$v|\n";
            }
            mail($cp_debug_email, 'CoinPayments IPN Error', $report);
        }
        die('IPN Error: '.$error_msg);
    }
}
